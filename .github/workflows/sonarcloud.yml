# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "main" ] # Projenizin ana dalı
  pull_request:
    branches: [ "main" ] # Projenizin ana dalı
    types: [opened, synchronize, reopened] # PR olaylarında tetikleme
  workflow_dispatch: # GitHub UI'dan manuel çalıştırma için

permissions:
  pull-requests: write # SonarCloud'un PR'ları yorumlaması için 'write' yetkisi gerekli

jobs:
  analysis:
    name: Build and Analyze
    runs-on: ubuntu-latest

    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Tüm geçmişi getirmek SonarCloud için zorunludur

      
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22.x' # Node.js versiyonunuzu buraya yazın

      
      - name: Install Node.js dependencies
        run: npm install # npm kullanıyorsanız `npm install`, yarn kullanıyorsanız `yarn install` yazın.

      
      - name: Build project
        run: npm run build # npm kullanıyorsanız `npm run build`, yarn kullanıyorsanız `yarn build` yazın.

      
      - name: Run tests and generate coverage
        run: npm test -- --coverage # BURAYA PROJENİZİN TEST KOMUTUNU YAZIN (örn: `jest --coverage`).
        continue-on-error: true

      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # GitHub Secrets'tan gelir

        with:
          # Additional arguments for the SonarScanner CLI.
          # Her argüman ayrı bir satırda ve '-' ile başlamalıdır,
          # veya tüm argümanlar tek bir çok satırlı string olarak '>' ile belirtilmelidir.
          # Ben çok satırlı string formatını kullanıyorum.
          args: >
            -Dsonar.projectKey=AyseMutluay_Seyahat_Rehberi
            -Dsonar.organization=aysemutluay
            -Dsonar.sources=.
            -Dsonar.tests=.
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            # Eğer isterseniz, daha detaylı loglar için aşağıdaki satırı etkinleştirebilirsiniz:
            # -Dsonar.verbose=true 

          # Analizin projenin temel dizininde yapılmasını sağlar.
          # Bu parametre 'args:' bloğunun dışında, 'with:' ile aynı seviyede olmalıdır.
          projectBaseDir: .
